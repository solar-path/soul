/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicIndexImport } from './routes/public/index'
import { Route as PublicPricingImport } from './routes/public/pricing'
import { Route as PublicDocsTermsPostImport } from './routes/public/docs/terms.post'
import { Route as PublicDocsPrivacyPostImport } from './routes/public/docs/privacy.post'

// Create/Update Routes

const PublicIndexRoute = PublicIndexImport.update({
  id: '/public/',
  path: '/public/',
  getParentRoute: () => rootRoute,
} as any)

const PublicPricingRoute = PublicPricingImport.update({
  id: '/public/pricing',
  path: '/public/pricing',
  getParentRoute: () => rootRoute,
} as any)

const PublicDocsTermsPostRoute = PublicDocsTermsPostImport.update({
  id: '/public/docs/terms/post',
  path: '/public/docs/terms/post',
  getParentRoute: () => rootRoute,
} as any)

const PublicDocsPrivacyPostRoute = PublicDocsPrivacyPostImport.update({
  id: '/public/docs/privacy/post',
  path: '/public/docs/privacy/post',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/public/pricing': {
      id: '/public/pricing'
      path: '/public/pricing'
      fullPath: '/public/pricing'
      preLoaderRoute: typeof PublicPricingImport
      parentRoute: typeof rootRoute
    }
    '/public/': {
      id: '/public/'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof rootRoute
    }
    '/public/docs/privacy/post': {
      id: '/public/docs/privacy/post'
      path: '/public/docs/privacy/post'
      fullPath: '/public/docs/privacy/post'
      preLoaderRoute: typeof PublicDocsPrivacyPostImport
      parentRoute: typeof rootRoute
    }
    '/public/docs/terms/post': {
      id: '/public/docs/terms/post'
      path: '/public/docs/terms/post'
      fullPath: '/public/docs/terms/post'
      preLoaderRoute: typeof PublicDocsTermsPostImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/public/pricing': typeof PublicPricingRoute
  '/public': typeof PublicIndexRoute
  '/public/docs/privacy/post': typeof PublicDocsPrivacyPostRoute
  '/public/docs/terms/post': typeof PublicDocsTermsPostRoute
}

export interface FileRoutesByTo {
  '/public/pricing': typeof PublicPricingRoute
  '/public': typeof PublicIndexRoute
  '/public/docs/privacy/post': typeof PublicDocsPrivacyPostRoute
  '/public/docs/terms/post': typeof PublicDocsTermsPostRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/public/pricing': typeof PublicPricingRoute
  '/public/': typeof PublicIndexRoute
  '/public/docs/privacy/post': typeof PublicDocsPrivacyPostRoute
  '/public/docs/terms/post': typeof PublicDocsTermsPostRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/public/pricing'
    | '/public'
    | '/public/docs/privacy/post'
    | '/public/docs/terms/post'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/public/pricing'
    | '/public'
    | '/public/docs/privacy/post'
    | '/public/docs/terms/post'
  id:
    | '__root__'
    | '/public/pricing'
    | '/public/'
    | '/public/docs/privacy/post'
    | '/public/docs/terms/post'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicPricingRoute: typeof PublicPricingRoute
  PublicIndexRoute: typeof PublicIndexRoute
  PublicDocsPrivacyPostRoute: typeof PublicDocsPrivacyPostRoute
  PublicDocsTermsPostRoute: typeof PublicDocsTermsPostRoute
}

const rootRouteChildren: RootRouteChildren = {
  PublicPricingRoute: PublicPricingRoute,
  PublicIndexRoute: PublicIndexRoute,
  PublicDocsPrivacyPostRoute: PublicDocsPrivacyPostRoute,
  PublicDocsTermsPostRoute: PublicDocsTermsPostRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/public/pricing",
        "/public/",
        "/public/docs/privacy/post",
        "/public/docs/terms/post"
      ]
    },
    "/public/pricing": {
      "filePath": "public/pricing.tsx"
    },
    "/public/": {
      "filePath": "public/index.tsx"
    },
    "/public/docs/privacy/post": {
      "filePath": "public/docs/privacy.post.tsx"
    },
    "/public/docs/terms/post": {
      "filePath": "public/docs/terms.post.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
