/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicIndexImport } from './routes/(public)/index'
import { Route as publicPricingImport } from './routes/(public)/pricing'
import { Route as publicDocsTermsPostImport } from './routes/(public)/docs/terms.post'
import { Route as publicDocsPrivacyPostImport } from './routes/(public)/docs/privacy.post'

// Create/Update Routes

const publicIndexRoute = publicIndexImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicPricingRoute = publicPricingImport.update({
  id: '/(public)/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const publicDocsTermsPostRoute = publicDocsTermsPostImport.update({
  id: '/(public)/docs/terms/post',
  path: '/docs/terms/post',
  getParentRoute: () => rootRoute,
} as any)

const publicDocsPrivacyPostRoute = publicDocsPrivacyPostImport.update({
  id: '/(public)/docs/privacy/post',
  path: '/docs/privacy/post',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)/pricing': {
      id: '/(public)/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof publicPricingImport
      parentRoute: typeof rootRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof rootRoute
    }
    '/(public)/docs/privacy/post': {
      id: '/(public)/docs/privacy/post'
      path: '/docs/privacy/post'
      fullPath: '/docs/privacy/post'
      preLoaderRoute: typeof publicDocsPrivacyPostImport
      parentRoute: typeof rootRoute
    }
    '/(public)/docs/terms/post': {
      id: '/(public)/docs/terms/post'
      path: '/docs/terms/post'
      fullPath: '/docs/terms/post'
      preLoaderRoute: typeof publicDocsTermsPostImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/pricing': typeof publicPricingRoute
  '/': typeof publicIndexRoute
  '/docs/privacy/post': typeof publicDocsPrivacyPostRoute
  '/docs/terms/post': typeof publicDocsTermsPostRoute
}

export interface FileRoutesByTo {
  '/pricing': typeof publicPricingRoute
  '/': typeof publicIndexRoute
  '/docs/privacy/post': typeof publicDocsPrivacyPostRoute
  '/docs/terms/post': typeof publicDocsTermsPostRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(public)/pricing': typeof publicPricingRoute
  '/(public)/': typeof publicIndexRoute
  '/(public)/docs/privacy/post': typeof publicDocsPrivacyPostRoute
  '/(public)/docs/terms/post': typeof publicDocsTermsPostRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/pricing' | '/' | '/docs/privacy/post' | '/docs/terms/post'
  fileRoutesByTo: FileRoutesByTo
  to: '/pricing' | '/' | '/docs/privacy/post' | '/docs/terms/post'
  id:
    | '__root__'
    | '/(public)/pricing'
    | '/(public)/'
    | '/(public)/docs/privacy/post'
    | '/(public)/docs/terms/post'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  publicPricingRoute: typeof publicPricingRoute
  publicIndexRoute: typeof publicIndexRoute
  publicDocsPrivacyPostRoute: typeof publicDocsPrivacyPostRoute
  publicDocsTermsPostRoute: typeof publicDocsTermsPostRoute
}

const rootRouteChildren: RootRouteChildren = {
  publicPricingRoute: publicPricingRoute,
  publicIndexRoute: publicIndexRoute,
  publicDocsPrivacyPostRoute: publicDocsPrivacyPostRoute,
  publicDocsTermsPostRoute: publicDocsTermsPostRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(public)/pricing",
        "/(public)/",
        "/(public)/docs/privacy/post",
        "/(public)/docs/terms/post"
      ]
    },
    "/(public)/pricing": {
      "filePath": "(public)/pricing.tsx"
    },
    "/(public)/": {
      "filePath": "(public)/index.tsx"
    },
    "/(public)/docs/privacy/post": {
      "filePath": "(public)/docs/privacy.post.tsx"
    },
    "/(public)/docs/terms/post": {
      "filePath": "(public)/docs/terms.post.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
